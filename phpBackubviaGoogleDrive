>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ADD THIS TO THIS TUTOURIAL WHERE TO ADD PRIVILEGS FOR THE USERS TO DO ALL 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ADD THIS TO THIS TUTOURIAL WHERE TO ADD PRIVILEGS FOR THE USERS TO DO ALL 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ADD THIS TO THIS TUTOURIAL WHERE TO ADD PRIVILEGS FOR THE USERS TO DO ALL 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ADD THIS TO THIS TUTOURIAL WHERE TO ADD PRIVILEGS FOR THE USERS TO DO ALL 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ADD THIS TO THIS TUTOURIAL WHERE TO ADD PRIVILEGS FOR THE USERS TO DO ALL 

ALSO GIVE PRIVILEGES TO 


## Note That I will not save that file as .php extension because it will just hold source code for important informations.
## Depeneds on project but you may create as class or just as script. I used for the cakephp tried as class.
## Unfortunately on production site doesn't work as exptected so I had to rewrite as normal script which was bullshit.

## IT IS FRUSTENING WHY YOU HAVE TO THIS AT BEGGING I KNOW BUT THEY DID THAT FOR USER INTERFACE AND DIDN'T EXPECT THAT 
## PEOPLE WILL USE IT FOR THE BACKUP SYSTEM.

## ONCE YOU DO THE STEPS BELOW YOU CAN GET BACKUPING YOUR WILES WHILE SCRIPT IN CRON ON YOUR WEBHOSTING


      ## 1. OPEN THE CODE IF IT ALREADY WORKING TO CREATE TOKEN WHICH CONTAINS TOKEN AND RERESH TOKEN
      ## 2. COPY THE URL WHICH WILL DISPLAY ACTIVE THE APP FOR THE USER YOU AHVE CHOOSE
      ## 3. COPY THE CODE TO THE URL AND COMMENT THE LINE WHICH WAS COMMENT AT THE BEGGING SEE CODE BELOW
      ## 4. ONCE YOU DID IT YOU WILL GET THE FILE WITH TOKEN AND THAT'S YOU WILL GETTING BACKUP ON YOUR DRIVE ZIPPED 
      
      Remark : 


<---------------------------------------------------- FIRST STEP -------------------------------------------------->

## Google Api must be activeted via google console over here : 
LINK: https://console.developers.google.com/apis/dashboard?project=church-info-50a9b&duration=PT1H

Documentation for php api for google: https://developers.google.com/api-client-library/php/start/get_started

Documentation for google drive api: https://developers.google.com/drive/v3/web/about-sdk




<------------------ IMPORTANT IMPORTANT IMPORTANT --------------------------------------------->

MAKE SURE YOU HAVE THE PROJECT FIRST OR CREATE ONE.
 
WE NEED TO ACTIVE OUR SERVICE IN API AND CREATE KEY SUCH AS CLIENT SECRET.JSON FOR THE PROJECT 

I CREATED NEW FOR GOOGLE DRIVE API AS INTERFACE (CHOOSE AS OTHERS YOU WILL SEE IN THIRD STEP WHY :)  ).

THAN YOU SELECT USER (I CHOSED THAT BECAUSE I WANTED THAT BACKUPS SAVES ON MY ACCOUNT) 
OR GIVE PRIVILGIES  I DIDN'T TESTED SO I DON'T 
IF WORKS.


IF EVERYTHING WENT FINE YOU WILL GET YOU SECRET JSON CLIENT INFO


DOWNLOAD AND CHANGE THE NAME FILE TO CLIENT_CUSTOMCHARS.json OR YOU DON'T CARE JUST client.json

PUT SOMEWEHERE WHERE THE FILES HAS JUST READ WRITES AND IS NOT VISILBE VIA BROWSER.

THIS FILES CONTAINS SOME CUSTOMS INFORMATIONS BUT CURRENTLY VERSION OF API : 29.09.2017 DOESN'T SUPPORT THEM.

IFNORMATIONS SUCH AS :

- client_id
- project_id
- auth_uri
- token_uri
- auth_provider_x509_cert_url
- client_secret
- redirect_uris


MAKE SURE YOU HAVE ALL THESE IN YOUR CLIENT.JSON OTHERWISE YOU DONE SOMETHING WRONG OR CHOOSE ANOTHER WAY OF CREATING JSON FILE.



<------------------ IMPORTANT IMPORTANT IMPORTANT  ENDING ENDING ENDING --------------------------------------------->

##This Google API for google drive needs that make sure you downloaded or install via composer :

VIA COMPOSER : composer require google/apiclient:^2.0

VIA WEB LINK : https://github.com/google/google-api-php-client



# Finally, be sure to include the autoloader:

require_once '/path/to/your-project/vendor/autoload.php';




<--------------------------------------------- SECOND STEP --------------------------------------------------------------->

___________________________________________________________________________

# YOU CAN CREATE SCRIPTS OR CLASS WITH CODE BELOW 

___________________________________________________________________________


# First these are the most important settings for large database exectu via php (More experience users knows about that ;)).


@error_reporting(E_ALL ^ E_WARNING);
@ini_set("max_execution_time", 300);
@ini_set("memory_limit", "256M");



    # We have to hold our connections via server sometimes it is PDO or mysqli but if you are thinking about backup
    # so you have already your connections code somewhere.
    
        $db_name = $connection['database'];
        $db_username = $connection['username'];
        $db_passwd = $connection['password'];
       
    # We create sql file and zipped already to the backup folder but make sure this forlder has 777 chmod.
    
        $sql_file = "dump_" . $db_name . "_" . new date(). ".sql";
        exec("mysqldump -u $db_username  -p'$db_passwd' --allow-keywords --add-drop-table --complete-insert --quote-names $db_name > backup/$sql_file && gzip  /backup/$sql_file ", $output, $return);
   

      
        $data = "/backup/" . $sql_file . ".gz";
        $title = "backup_" . $db_name . "_" . new date();
      
        
        $result = sendFileToTheServer($data, $title, $code);
        IF THE FUNCTION RETURN TRUE DELETE OR IF NOT TRUE ASLO BECAUSE YOU NEVER KNOW WHO IS WATCHING !!@#!@#!@#!@
        
        if ($result) {
            unlink("backup/" . $sql_file . ".gz");
        } else {
            unlink("backup/" . $sql_file . ".gz");
        }
    
    
  

<--------------------------------------------- THIRD STEP --------------------------------------------------------------->

# CREATE FILE WHERE WILL BE GOOGLE API SUCH AS BELOW 


                    ##################################################################################################
                                    MAKE SURE TO HAVE PATH TO CLASS OF GOOGLE API
                    ##################################################################################################
                                    require_once("google-api-php-client/src/Google_Client.php");
                                   ---------------------------------------------------------------
                                   
             $client_id = "IT_IS_CLIEN_ID_OF_API_YOU_CREATED_IN_GOOGLE_CONSOLE_COPY_IT_IN_TO_THIS_VARIABLE"
             $client_secret = "THS_IS_PATH_TO_CLIEN_JSON_FILE"
             $path_to_backup = "/backup/"
             
             // THIS IS THE SCOPE FOR THE CLASS OR YOU CAN SELECT AFTER WHILE CONNECTING TO THE CLIENT SEE BELOW
             //THIS IS NOT IMPORRANT DEPENDS IF IS IT SCRIPT OR CLASS 
             $scopes = implode('', array(
            \Google_Service_Drive::DRIVE_METADATA_READONLY)     );
                
                
       // THE MOST IMPORTANT FUNCTION AND THE WORST BECAUSE MAY CHANGE IN FEW MONTHS:
       
        public function getClient() {
        
        // IF YOU DON't SEE GOOGLE_CLIENT() MAKE SURE TO CHECK THE PATH TO GOOGLE CLASS API
        $client = new \Google_Client();
        
        $client->setApplicationName("NAME OF YOUR API");
        
        // SELECT THIS SCOPE MEANS THAT YOU WANT TO USE GOOGLE DRIVE AUTH
        $client->setScopes('https://www.googleapis.com/auth/drive');
        
        $client->setAuthConfig($client_secret);
        //We want to do it just once and than we will be able to do it without remake of entire functionality
        $client->setAccessType('offline');
        // no asking about for which user once again
        $client->setApprovalPrompt('force');

        // Load previously authorized credentials from a file.

       
       $file = file_get_contents($path_to_backup."/token.json");
        if (file_exists($file)) {

            $accessToken = json_decode(file_get_contents('backup/token.json'), true);
        } else {
            //Request authorization from the user
            //  $authUrl = $client->createAuthUrl();                  <--------- THIS COMMENT PART IS JUST FOR FIRST TIME
            //echo $authUrl;                                          <--------- FOR GET THE TOKEN BY COPY THE URL TO BROWSER
            //  die();                                                <--------- ONCE WE GET THE AUTH CODE IS CORRECT 
                                                                      <----- STUPID BUT YOU NEED COPY THIS CODE MAUNAL TO THE PHP SCRIPT
            // $authCode = "";                                        <--------- COMMENT AGAIN THESE LINES 
            if ($authCode == null) {                                  <---------- RUN SCRIPT AGAIN AND YOU WILL SEE THAT THE SCRIPT WORKS
                die();
            } else {
                // Exchange authorization code for an access token.
                $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);
                // Store the credentials to disk.
                if (!file_exists($file)) {
                     $accessToken = $client->authenticate($authCode);      
                  file_put_contents("backup/token.json",$accessToken);  
                }
            }
        }
        $client->setAccessToken($accessToken);
        // Refresh the token if it's expired.
        if ($client->isAccessTokenExpired()) {
            $refreshTokenSaved = $client->getRefreshToken();

            // update access token
            $client->fetchAccessTokenWithRefreshToken($refreshTokenSaved);

            // pass access token to some variable
            $accessTokenUpdated = $client->getAccessToken();

            // append refresh token
            $accessTokenUpdated['refresh_token'] = $refreshTokenSaved;

            //Set the new acces token
            $accessToken = $refreshTokenSaved;
            $client->setAccessToken($accessTokenUpdated);
        }
        return $client;
    }
    
    ##########################################################################################################################
    ##########################################################################################################################
    ##########################################################################################################################
    
    
    SEND FUNCTION WHICH CONTAINS  TITLE AND DATA TO BE STORE IN GOOGLE DRIVE IN FOLDER WHERE WILL GET THE ID
    public function sendFileToTheServer($data = null, $title = null) {

        $client = $this->getClient()
        
        SOMETIMES YOU WILL NOT ABLE TO FIND GOOGLE_SERVICE_DRIVE AND YOU NEED TO DOWNLOAD MANULLLY OR FIND IN THE FILES.
        
        $service = new \Google_Service_Drive($client);
        
     #THIS TO IS NECCERERALY TO FIND AS THE CODE AND COMMENT THE LIENS  I WILL TRY TO FIND ANOTHER WAY
     #IF YOU WANT TO HAVE YOU BACKUP IN FOLDER WITH SUCH NAME YOU WILL NOT TO GET ID OF IT 
     #THE PROBLEM WITH API IS YOU NEED TO PRINT IT MANNAULY AND COPY HARDCORE IN TO THE CODE AS I DID
        
        $folderId = 'GENERATED ID WITH CODE BELOW';
        
        $file = new \Google_Service_Drive_DriveFile();
        $file->setParents(array($folderId));
        $file->setName($title . ".gz");

        $file->setDescription("Server backup file");
        /*
         * Code to obtain folder id still searching for good function.
          $pageToken = null;
          do {
          $response = $service->files->listFiles(array(

          'mimeType' => "application/vnd.google-apps.folder'",
          'spaces' => 'drive',
          'pageToken' => $pageToken,
          'fields' => 'nextPageToken, files(id, name)',
          ));
          foreach ($response->files as $file) {
          printf("Found file: %s (%s)\n", $file->name, $file->id);
          }

          $pageToken = $repsonse->pageToken;
          } while ($pageToken != null);

               */
        
        
        
        if ($data != null) {
           $path = "path to sql files"
            $createdFile = $service->files->create($file, array(
                'data' => file_get_contents($path,
                'mimeType' => 'application/octet-stream',
                'uploadType' => 'multipart',
                'fields' => 'id'                   <------ THIS IS IF YOU WANT PUT IN THE FOLDER
            ));
            // print_r($createdFile);
            return true;
        } else {
            return false;
        }
    }
    
                                   




